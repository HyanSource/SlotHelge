// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Pb {

  /// <summary>Holder for reflection information generated from msg.proto</summary>
  public static partial class MsgReflection {

    #region Descriptor
    /// <summary>File descriptor for msg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgltc2cucHJvdG8SAnBiIhYKBU1vbmV5Eg0KBU1vbmV5GAEgASgFIhMKBFBs",
            "YXkSCwoDQmV0GAEgASgFIn0KBlJlc3VsdBINCgVUYWJsZRgBIAMoBRITCgtQ",
            "YXlsaW5lc251bRgCIAMoBRIVCg1QYXlsaW5lc2NvdW50GAMgAygFEgwKBE9k",
            "ZHMYBCABKAUSGAoFTW9uZXkYBSABKAsyCS5wYi5Nb25leRIQCghXaW5Nb25l",
            "eRgGIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Money), global::Pb.Money.Parser, new[]{ "Money_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Play), global::Pb.Play.Parser, new[]{ "Bet" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Pb.Result), global::Pb.Result.Parser, new[]{ "Table", "Paylinesnum", "Paylinescount", "Odds", "Money", "WinMoney" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///金錢
  /// </summary>
  public sealed partial class Money : pb::IMessage<Money> {
    private static readonly pb::MessageParser<Money> _parser = new pb::MessageParser<Money>(() => new Money());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Money> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money(Money other) : this() {
      money_ = other.money_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Money Clone() {
      return new Money(this);
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int Money_FieldNumber = 1;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money_ {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Money);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Money other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money_ != other.Money_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money_ != 0) hash ^= Money_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money_ != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Money_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money_ != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Money other) {
      if (other == null) {
        return;
      }
      if (other.Money_ != 0) {
        Money_ = other.Money_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Money_ = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///下注
  /// </summary>
  public sealed partial class Play : pb::IMessage<Play> {
    private static readonly pb::MessageParser<Play> _parser = new pb::MessageParser<Play>(() => new Play());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Play> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play(Play other) : this() {
      bet_ = other.bet_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Play Clone() {
      return new Play(this);
    }

    /// <summary>Field number for the "Bet" field.</summary>
    public const int BetFieldNumber = 1;
    private int bet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bet {
      get { return bet_; }
      set {
        bet_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Play);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Play other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Bet != other.Bet) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bet != 0) hash ^= Bet.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bet != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Bet);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bet);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Play other) {
      if (other == null) {
        return;
      }
      if (other.Bet != 0) {
        Bet = other.Bet;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Bet = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///盤面
  /// </summary>
  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Pb.MsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      table_ = other.table_.Clone();
      paylinesnum_ = other.paylinesnum_.Clone();
      paylinescount_ = other.paylinescount_.Clone();
      odds_ = other.odds_;
      Money = other.money_ != null ? other.Money.Clone() : null;
      winMoney_ = other.winMoney_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "Table" field.</summary>
    public const int TableFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_table_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> table_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Table {
      get { return table_; }
    }

    /// <summary>Field number for the "Paylinesnum" field.</summary>
    public const int PaylinesnumFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_paylinesnum_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> paylinesnum_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Paylinesnum {
      get { return paylinesnum_; }
    }

    /// <summary>Field number for the "Paylinescount" field.</summary>
    public const int PaylinescountFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_paylinescount_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> paylinescount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Paylinescount {
      get { return paylinescount_; }
    }

    /// <summary>Field number for the "Odds" field.</summary>
    public const int OddsFieldNumber = 4;
    private int odds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Odds {
      get { return odds_; }
      set {
        odds_ = value;
      }
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 5;
    private global::Pb.Money money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pb.Money Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "WinMoney" field.</summary>
    public const int WinMoneyFieldNumber = 6;
    private int winMoney_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinMoney {
      get { return winMoney_; }
      set {
        winMoney_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!table_.Equals(other.table_)) return false;
      if(!paylinesnum_.Equals(other.paylinesnum_)) return false;
      if(!paylinescount_.Equals(other.paylinescount_)) return false;
      if (Odds != other.Odds) return false;
      if (!object.Equals(Money, other.Money)) return false;
      if (WinMoney != other.WinMoney) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= table_.GetHashCode();
      hash ^= paylinesnum_.GetHashCode();
      hash ^= paylinescount_.GetHashCode();
      if (Odds != 0) hash ^= Odds.GetHashCode();
      if (money_ != null) hash ^= Money.GetHashCode();
      if (WinMoney != 0) hash ^= WinMoney.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      table_.WriteTo(output, _repeated_table_codec);
      paylinesnum_.WriteTo(output, _repeated_paylinesnum_codec);
      paylinescount_.WriteTo(output, _repeated_paylinescount_codec);
      if (Odds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Odds);
      }
      if (money_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Money);
      }
      if (WinMoney != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(WinMoney);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += table_.CalculateSize(_repeated_table_codec);
      size += paylinesnum_.CalculateSize(_repeated_paylinesnum_codec);
      size += paylinescount_.CalculateSize(_repeated_paylinescount_codec);
      if (Odds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Odds);
      }
      if (money_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Money);
      }
      if (WinMoney != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinMoney);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      table_.Add(other.table_);
      paylinesnum_.Add(other.paylinesnum_);
      paylinescount_.Add(other.paylinescount_);
      if (other.Odds != 0) {
        Odds = other.Odds;
      }
      if (other.money_ != null) {
        if (money_ == null) {
          money_ = new global::Pb.Money();
        }
        Money.MergeFrom(other.Money);
      }
      if (other.WinMoney != 0) {
        WinMoney = other.WinMoney;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            table_.AddEntriesFrom(input, _repeated_table_codec);
            break;
          }
          case 18:
          case 16: {
            paylinesnum_.AddEntriesFrom(input, _repeated_paylinesnum_codec);
            break;
          }
          case 26:
          case 24: {
            paylinescount_.AddEntriesFrom(input, _repeated_paylinescount_codec);
            break;
          }
          case 32: {
            Odds = input.ReadInt32();
            break;
          }
          case 42: {
            if (money_ == null) {
              money_ = new global::Pb.Money();
            }
            input.ReadMessage(money_);
            break;
          }
          case 48: {
            WinMoney = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
